# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: impact-dashboard
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-plugin-include-dependencies
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-dotenv-plugin

provider:
  # profile is for your powerUser credentials profile
  profile: ${env:AWS_PROFILE}
  name: aws
  runtime: nodejs10.x
  stage: ${env:REACT_APP_STAGE}


package:
  include:
    - build/**

custom:
  apigwBinary:
    types:
      - '*/*'

functions:
  ui:
    handler: lambda/ui/ui.universal
    events:
      - http: ANY {proxy+}
      - http: ANY /
#  expressApp:
#    handler: server.expressHandler
#    name: 'expressApp-${self:provider.stage}'
#    events:
#      - http: ANY /
#      - http: 'ANY {proxy+}'

  PublicDash:
    handler: lambda/handler.PublicDash
    name: 'publicDash-${env:REACT_APP_STAGE}'
    events:
      - http:
          path: /Public-Dashboard-Metrics
          method: get
  TeamDash:
    handler: lambda/handler.TeamDash
    name: 'TeamDash-${env:REACT_APP_STAGE}'
    events:
      - http:
          path: /Team-Dashboard-Metrics
          method: get
  PersonalDash:
    handler: lambda/handler.PersonalDash
    name: 'PersonalDash-${env:REACT_APP_STAGE}'
    events:
      - http:
          path: /Personal-Dashboard-Metrics
          method: get
  TeamReport:
    handler: lambda/reports.pdf
    name: 'TeamReport-${env:REACT_APP_STAGE}'
    events:
      - http:
          path: /Team-Report
          method: get
          cors: true
  # Badge1:
  #   handler: lambda/handler.Badge1
  #   name: 'Badge1-${self:provider.stage}'
  #   events:
  #     - http:
  #         path: /Badge1
  #         method: get
  # Badge2:
  #   handler: lambda/handler.Badge2
  #   name: 'Badge2-${self:provider.stage}'
  #   events:
  #     - http:
  #         path: /Badge2
  #         method: get
  # Badge3:
  #   handler: lambda/handler.Badge3
  #   name: 'Badge3-${self:provider.stage}'
  #   events:
  #     - http:
  #         path: /Badge3
  #         method: get
  # Badges:
  #   handler: lambda/handler.Badges
  #   name: 'Badges-${self:provider.stage}'
  #   events:
  #     - http:
  #         path: /Badges
  #         method: get



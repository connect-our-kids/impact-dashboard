# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: impact-dashboard
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-plugin-include-dependencies
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-associate-waf
  - serverless-offline
  - serverless-mocha-plugin 

provider:
  # profile is for your powerUser credentials profile
  profile: default
  name: aws
  runtime: nodejs10.x
  stage: dev-nisa


package:
  include:
    - build/**

custom:
  apigwBinary:
    types:
      - '*/*'

functions:
  ui:
    handler: lambda/ui.universal
    events:
      - http: ANY {proxy+}
      - http: ANY /
#  expressApp:
#    handler: server.expressHandler
#    name: 'expressApp-${self:provider.stage}'
#    events:
#      - http: ANY /
#      - http: 'ANY {proxy+}'

  catmemes:
    handler: lambda/handler.catMemes
    name: 'hellocats-${self:provider.stage}'
    events:
      - http:
          path: /cats
          method: get
  shakespeareQuotes:
    handler: lambda/handler.shakespeareQuotes
    name: 'shakespeare-${self:provider.stage}'
    events:
      - http:
          path: /shakespeareQuotes
          method: get
  gitHubBigQuery:
    handler: lambda/handler.gitHubBigQuery
    name: 'github-${self:provider.stage}'
    events:
      - http:
          path: /commits
          method: get
  moonPhases:
    handler: lambda/handler.moonPhases
    name: 'moon-${self:provider.stage}'
    events:
      - http:
          path: /moonPhases
          method: get
  testing:
    handler: lambda/handler.testing
    name: 'testing-${self:provider.stage}'
    events:
      - http:
          path: hello
          method: post
  Badge1:
    handler: lambda/handler.Badge1
    name: 'Badge1-${self:provider.stage}'
    events:
      - http:
          path: /Badge1
          method: get


